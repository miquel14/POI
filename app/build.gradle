buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.fernandocejas.frodo:frodo-plugin:0.8.2"
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'checkstyle'
//apply plugin: 'io.fabric' //TODO Uncomment to add fabric plugin

repositories {
    maven {
        url 'https://maven.fabric.io/public'
    }
}

//preBuild.dependsOn 'checkstyle'

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/config/quality/checkstyle/checkstyle.xml")
    configProperties.checkstyleSuppressionsPath = file("${project.rootDir}/config/quality/checkstyle/suppressions.xml").absolutePath
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}


android {
    compileSdkVersion rootProject.ext.androidCompileSdkVersion
    buildToolsVersion rootProject.ext.androidBuildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.androidApplicationId
        minSdkVersion rootProject.ext.androidMinSdkVersion
        targetSdkVersion rootProject.ext.androidTargetSdkVersion

        versionCode rootProject.ext.androidVersionCode
        versionName rootProject.ext.androidVersionName
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'            //Some libraries have issues with this.
        disable 'OldTargetApi'              //Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'IconDensities'             //For testing purpose. This is safe to remove.
        disable 'IconMissingDensityFolder'  //For testing purpose. This is safe to remove.
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    // Set the keystore location for every buildType
    signingConfigs {
        debug {
            storeFile file(getSignFile('debug.properties'))
            println "**********" + getStoreFile().getName() + "*********"
        }

        release {
            storeFile file(getSignFile('release.properties'))
            println "**********" + getStoreFile().getName() + "*********"
            storePassword getSignFilePassword('release.properties')
            keyAlias getSignAlias('release.properties')
            keyPassword getSignAliasPassword('release.properties')
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable true
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    def applicationDependencies = rootProject.ext.applicationDependencies
    def applicationTestingDependencies = rootProject.ext.applicationTestingDependencies

    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Arch dependencies
    compile applicationDependencies.dagger
    apt applicationDependencies.daggerCompiler
    provided applicationDependencies.javaxAnnotations
    compile applicationDependencies.rxJava
    compile applicationDependencies.rxAndroid

    // UI dependencies
    compile applicationDependencies.appCompat_v7
    compile applicationDependencies.support_v4
    compile applicationDependencies.design
    compile applicationDependencies.butterKnife

    // Other dependencies
    compile applicationDependencies.dexter
    compile applicationDependencies.t21Commons
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }

    // Testing dependencies
    testCompile applicationTestingDependencies.jUnit
    testCompile applicationTestingDependencies.mockito
    testCompile applicationTestingDependencies.roboelectric

    // Module dependencies
    compile project(':domain')
    compile project(':data')
}